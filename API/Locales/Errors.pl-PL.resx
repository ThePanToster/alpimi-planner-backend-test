<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="alreadyExists" xml:space="preserve">
    <value>{0} o nazwie {1} już istnieje</value>
  </data>
  <data name="badParameter" xml:space="preserve">
    <value>Parametr {0} jest niepoprawny</value>
  </data>
  <data name="invalidLoginOrPassword" xml:space="preserve">
    <value>Niepoprawny login lub hasło</value>
  </data>
  <data name="invalidPassword" xml:space="preserve">
    <value>Niepoprawne hasło</value>
  </data>
  <data name="longPassword" xml:space="preserve">
    <value>Hasło nie może być dłuższe niż {0} znaków</value>
  </data>
  <data name="notFound" xml:space="preserve">
    <value>Encja nie została znaleziona</value>
  </data>
  <data name="passwordMustContain" xml:space="preserve">
    <value>Hasło musi zawierać po jednym z następujących: {0}</value>
  </data>
  <data name="shortPassword" xml:space="preserve">
    <value>Hasło nie może być krótsze niż {0} znaków</value>
  </data>
  <data name="unknownError" xml:space="preserve">
    <value>Wystąpił błąd: {0}</value>
  </data>
  <data name="connectionError" xml:space="preserve">
    <value>Wystąpił problem połączenia z bazą danych. Sprawdź parametry połączenia oraz połączenie z internetem</value>
  </data>
  <data name="tooManyRequests" xml:space="preserve">
    <value>Zbyt dużo zapytań. Spróbuj ponownie poźniej</value>
  </data>
  <data name="notAuthenticated" xml:space="preserve">
    <value>Brak autentykacji</value>
  </data>
  <data name="notAuthorized" xml:space="preserve">
    <value>Brak dostępu do danego zasobu</value>
  </data>
  <data name="scheduleDate" xml:space="preserve">
    <value>Data zakończenia nie może być przed datą rozpoczęcia</value>
  </data>
  <data name="dateOutOfRange" xml:space="preserve">
    <value>Data musi mieścić się w zakresie od {0} do {1}</value>
  </data>
  <data name="scheduleTime" xml:space="preserve">
    <value>Czas zakończenia nie może być przed czasem rozpoczęcia</value>
  </data>
  <data name="timeOverlap" xml:space="preserve">
    <value>{0} nie mogą nakładać się na siebie</value>
  </data>
  <data name="outOfRange" xml:space="preserve">
    <value>Isnieją {0} poza podanym zakresem. Proszę je najpierw zmienić</value>
  </data>
  <data name="tooManyStudents" xml:space="preserve">
    <value>Liczba studentów w podgrupie nie może być większa niż liczba studentów w grupie</value>
  </data>
  <data name="duplicateData" xml:space="preserve">
    <value>Nie można wielokrotnie dodać {0} o wartości {1}</value>
  </data>
  <data name="resourceNotFound" xml:space="preserve">
    <value>{0} z id {1} nie został znaleziony</value>
  </data>
  <data name="wrongSet" xml:space="preserve">
    <value>{0} musi należeć do tego samego {1} co {2}</value>
  </data>
  <data name="badWeekDay" xml:space="preserve">
    <value>Lekcja nie może odbywać się w {0}</value>
  </data>
  <data name="cantContain" xml:space="preserve">
    <value>{0} może tylko zawierać następujące: {1}</value>
  </data>
</root>